//
//  NetworkingTest.swift
//  PoliceTests
//
//  Created by Riccardo on 28/01/2019.
//  Copyright Â© 2019 RiccardoScanavacca. All rights reserved.
//

import XCTest
@testable import Police

class NetworkingTest: XCTestCase {

    override func setUp() {
        
    }

    override func tearDown() {
        
    }
    
    
    
    func testSuccesfulNetworkGetRequest() {
        
        let expectation = self.expectation(description: "SuccesfulGetRequest")
        var connectionError: NSError? = nil
        
        NetworkProvider.getRequest(forUrl: Task.response200.url) { (data, error) in
            
            connectionError = error
            expectation.fulfill()
        }
        
        self.waitForExpectations(timeout: 3) { (error) in
            
            print(error.debugDescription)
        }
        print(connectionError?.code)
        XCTAssertNil(connectionError)
    }
    
    func testErrorNetworkGetRequest() {
        
        let expectation = self.expectation(description: "ErrorGetRequest")
        var connectionError: NSError? = nil
        
        NetworkProvider.getRequest(forUrl: Task.error.url) { (data, error) in
            
            connectionError = error
            expectation.fulfill()
        }
        
        self.waitForExpectations(timeout: 3) { (error) in
            
            print(error.debugDescription)
        }
        
        XCTAssertNotNil(connectionError, "\(connectionError.debugDescription)")
    }
    
    
    func testTooLongGetRequest() {
        
        let expectation = self.expectation(description: "TooLongGetRequest")
        var connectionError: NSError? = nil
        
        NetworkProvider.getRequest(forUrl: Task.response503.url) { (data, error) in
            
            connectionError = error
            expectation.fulfill()
        }
        
        self.waitForExpectations(timeout: 10) { (error) in
            
            print(error.debugDescription)
        }

        XCTAssert(connectionError?.code == 503)
    }
    
    func testTooManyCrimesGetRequest() {
        
        let expectation = self.expectation(description: "TooLongGetRequest")
        var connectionError: NSError? = nil
        
        NetworkProvider.getRequest(forUrl: Task.response400.url) { (data, error) in
            
            connectionError = error
            expectation.fulfill()
        }
        
        self.waitForExpectations(timeout: 3) { (error) in
            
            print(error.debugDescription)
        }

        XCTAssert(connectionError?.code == 400)
    }
    
    
    enum Task {
        
        case response200, error, response400, response503
        
        var url: URL {
            
            switch self {
            case .response200:
                return URL(string:"http://httpbin.org/get")!
            case .response400:
                return URL(string: longRequest)!
            case .response503:
                return URL(string: "https://httpstat.us/503")!
            case .error:
                return URL(string: "randomString")!
            }
        }
    }
    
    static let longRequest = "https://data.police.uk/api/stops-street?poly=52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88:52.2,0.5:52.8,0.2:52.1,0.88"


}
